#include<stdlib.h>
#include<stdio.h>

typedef struct nodo{
    int tipo;
    float tempo;
    char * nomeRotina;
    struct nodo * prox;

}N;

typedef struct dia{
    int tempDia;
    char * dia;

}D;

typedef struct hash{
    N ** s;
    D * d;
    int tam;

}H;

//cria lista encadeada, cada nodo sera uma rotina
N * criaNodo(float periodo, char * nomeRot, int tipo){
    N * n = (N *) malloc(sizeof(N));
    n->tempo = periodo;
    n->tipo = tipo;
    n->nomeRotina = nomeRot;
    n->prox = NULL;
    return n;
}

//cria dois vetores, o vetor v cordena o vetor dia e a lista rotina
H * criaHash(int t){
    int i;

    //vetor controle semana
    H * v = (H *) malloc(sizeof(H));
    v->tam = t;

    //apontamento para a lista encadeada
    N ** ocup = (N *) malloc(sizeof(N) * t);

    //apontamento para vetor dia
    v->d = (D *) malloc(sizeof(D) * t);

    for(i = 0; i < t; i++){
        ocup[i] = NULL;
        v->d[i].tempDia = 24;
    }
     v->d[0].dia = "SEGUNDA";
     v->d[1].dia = "TERCA";
     v->d[2].dia = "QUARTA";
     v->d[3].dia = "QUINTA";
     v->d[4].dia = "SEXTA";

    v->s = ocup;
    return v;
}

//percorre lista encadeada e printa valores
void printaRotinas(N * rot){
    if(rot != NULL){
       printf(" ROTINA: %s - TEMPO: %.1f hrs|", rot->nomeRotina, rot->tempo);
       printaRotinas(rot->prox);
    }
}

//printa toda estrutura criada(encadeada e vetores)
void printaHash(H * v){
    int i;

    for(i = 1; i < v->tam+1; i++){
        printf("| %d | %s | %d hrs |", i, v->d[i-1].dia, v->d[i-1].tempDia);

        if(v->s[i-1] == NULL){
            printf("NULL \n");
        }else{
            int ind = i-1;
            printaRotinas(v->s[ind]);
            printf("\n");
        }
    }
}

//cria nodos novos e insere de forma prioritaria
void insereRotina(N ** rotina, char * nameRot, float tempo, int tipo){
    if(*rotina == NULL){
        *rotina = criaNodo(tempo, nameRot, tipo);
    }else{
        if(tipo == 1){
                N * pNodo = (N *) malloc(sizeof(N));
                pNodo->prox = (*rotina)->prox;
                pNodo->nomeRotina = nameRot;
                pNodo->tempo = tempo;
                pNodo->tipo = tipo;
                (*rotina)->prox =  pNodo;
        }else{
            insereRotina(&(*rotina)->prox, nameRot, tempo, tipo);
        }
    }
}

//remove o ultimo nodo da lista encadeada
int remover(N ** rNodo){
    int tempo;
    if((*rNodo)->prox == NULL){
        tempo = (*rNodo)->tempo;
        (*rNodo) = NULL;
        free(*rNodo);
        return tempo;
    }else{
        remover(&(*rNodo)->prox);
    }
}

//insere uma lista em uma posicao especÃ­fica ou em todas as posicoes do vetor d
void insereHash(H * v, int tempo, char * nomeRot, int tipo, int tarDiaria, int diaS){
        do{
            if(tipo == 1 && v->d[diaS].tempDia > tempo){
                insereRotina(&v->s[diaS], nomeRot, tempo, tipo);
                v->d[diaS].tempDia = v->d[diaS].tempDia - tempo;

            }else if(tipo == 1 && v->d[diaS].tempDia < tempo){
                v->d[diaS].tempDia = v->d[diaS].tempDia + remover(&v->s[diaS]);
                insereHash(v, tempo, nomeRot, tipo, tarDiaria, diaS);
            }else if(tipo == 2 && v->d[diaS].tempDia > tempo || tipo == 3 && v->d[diaS].tempDia > tempo){
                    insereRotina(&v->s[diaS], nomeRot, tempo, tipo);
                    v->d[diaS].tempDia = v->d[diaS].tempDia - tempo;

            }else if(tipo == 2 && v->d[diaS].tempDia < tempo || tipo == 3 && v->d[diaS].tempDia < tempo){
                printf("Nao ha tempo suficiente para tarefa %s na %s\n", nomeRot, v->d[diaS].dia);

            }
        diaS++;
        if(diaS >= 5)
            tarDiaria = 0;
    }while(tarDiaria == 1);
}

//procura dia mais livre para colocar tarefa
void diaMaisLivre(H * v){

}

int main(){
    char name[30], nameRot[100];
    int tipo;
    float tempo;

    H * v = criaHash(5);

    /*printf("Digite seu nome: ");
    gets(name);
    printf("Digite o nome da rotina: ");
    gets(nameRot);
    printf("Digite o tempo em horas da rotina (podendo usar fra%cao de hora ex. 0.2): ", 135);
    scanf("%f", &tempo);
    printf("Tipo da rotina \n1 - Obrigatoria\n2 - Lazer \n3 - Tarefa\nEscolha: ");
    scanf("%d", &tipo);
    */
    printaHash(v);

    printf("\n");
    insereHash(v, 2, "Jantar Fora", 2, 0, 0);
    insereHash(v, 2, "Transito", 1, 1, 0);
    insereHash(v, 8, "Trabalhar", 1, 1, 0);
    insereHash(v, 3, "Olhar Series", 2, 0, 1);
    insereHash(v, 1, "Lavar Louca", 3, 0, 2);
    insereHash(v, 6, "Dormir", 1, 1, 0);
    insereHash(v, 4, "Faculdade", 1, 0, 0);
    printaHash(v);

    return 0;
}
